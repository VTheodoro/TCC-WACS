# Guia de Testes APP-WACS

## Configuração do Ambiente

### Dependências
```json
{
  "devDependencies": {
    "jest": "^26.6.3",
    "jest-expo": "~45.0.1",
    "react-test-renderer": "17.0.1",
    "@testing-library/react-native": "^9.0.0"
  }
}
```

### Configuração do Jest
```javascript
module.exports = {
  preset: 'jest-expo',
  transformIgnorePatterns: [
    'node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@unimodules/.*|unimodules|sentry-expo|native-base|react-native-svg)',
  ],
  setupFiles: ['<rootDir>/jest.setup.js'],
  collectCoverage: true,
  collectCoverageFrom: [
    'src/**/*.{js,jsx}',
    '!src/**/*.test.{js,jsx}',
    '!src/**/*.stories.{js,jsx}',
    '!src/**/index.{js,jsx}',
    '!src/**/constants.{js,jsx}',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
};
```

## Testes Unitários

### Componentes
```javascript
import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import MyComponent from './MyComponent';

describe('MyComponent', () => {
  it('renders correctly', () => {
    const { getByText } = render(<MyComponent title="Test" />);
    expect(getByText('Test')).toBeTruthy();
  });

  it('handles press event', () => {
    const onPress = jest.fn();
    const { getByText } = render(<MyComponent title="Test" onPress={onPress} />);
    fireEvent.press(getByText('Test'));
    expect(onPress).toHaveBeenCalled();
  });
});
```

### Redux
```javascript
import { configureStore } from '@reduxjs/toolkit';
import locationReducer from './locationSlice';

describe('locationSlice', () => {
  let store;

  beforeEach(() => {
    store = configureStore({
      reducer: {
        location: locationReducer,
      },
    });
  });

  it('should handle initial state', () => {
    expect(store.getState().location).toEqual({
      currentLocation: null,
      destination: null,
      route: null,
      isTracking: false,
      error: null,
    });
  });

  it('should handle setCurrentLocation', () => {
    const location = { latitude: 0, longitude: 0 };
    store.dispatch(setCurrentLocation(location));
    expect(store.getState().location.currentLocation).toEqual(location);
  });
});
```

### Hooks
```javascript
import { renderHook, act } from '@testing-library/react-hooks';
import { useLocation } from './useLocation';

describe('useLocation', () => {
  it('should return initial state', () => {
    const { result } = renderHook(() => useLocation());
    expect(result.current.currentLocation).toBeNull();
    expect(result.current.isTracking).toBeFalsy();
  });

  it('should update location when tracking', async () => {
    const { result } = renderHook(() => useLocation());
    
    await act(async () => {
      result.current.startTracking();
    });

    expect(result.current.isTracking).toBeTruthy();
  });
});
```

## Testes de Integração

### Navegação
```javascript
import { render, fireEvent } from '@testing-library/react-native';
import { NavigationContainer } from '@react-navigation/native';
import AppNavigator from './AppNavigator';

describe('Navigation', () => {
  it('navigates to details screen', () => {
    const { getByText, getByTestId } = render(
      <NavigationContainer>
        <AppNavigator />
      </NavigationContainer>
    );

    fireEvent.press(getByText('Details'));
    expect(getByTestId('details-screen')).toBeTruthy();
  });
});
```

### APIs
```javascript
import { render, waitFor } from '@testing-library/react-native';
import { Provider } from 'react-redux';
import { store } from './store';
import App from './App';

describe('API Integration', () => {
  it('loads and displays data', async () => {
    const { getByText } = render(
      <Provider store={store}>
        <App />
      </Provider>
    );

    await waitFor(() => {
      expect(getByText('Loading...')).toBeTruthy();
    });

    await waitFor(() => {
      expect(getByText('Data loaded')).toBeTruthy();
    });
  });
});
```

## Testes de Performance

### Renderização
```javascript
import { render, screen } from '@testing-library/react-native';
import { performance } from 'perf_hooks';

describe('Performance', () => {
  it('renders within acceptable time', () => {
    const start = performance.now();
    render(<ComplexComponent />);
    const end = performance.now();
    
    expect(end - start).toBeLessThan(100);
  });
});
```

### Memória
```javascript
import { render, unmountComponentAtNode } from 'react-native';
import { performance } from 'perf_hooks';

describe('Memory', () => {
  it('cleans up resources', () => {
    const container = document.createElement('div');
    render(<ComponentWithResources />, container);
    
    const before = performance.memory.usedJSHeapSize;
    unmountComponentAtNode(container);
    const after = performance.memory.usedJSHeapSize;
    
    expect(after).toBeLessThan(before);
  });
});
```

## Testes de Acessibilidade

### Screen Reader
```javascript
import { render } from '@testing-library/react-native';
import { AccessibilityInfo } from 'react-native';

describe('Accessibility', () => {
  it('has correct accessibility labels', () => {
    const { getByLabelText } = render(<AccessibleComponent />);
    expect(getByLabelText('Submit button')).toBeTruthy();
  });

  it('announces changes', () => {
    const { getByText } = render(<AnnouncingComponent />);
    fireEvent.press(getByText('Update'));
    expect(AccessibilityInfo.announceForAccessibility)
      .toHaveBeenCalledWith('Content updated');
  });
});
```

## Testes de Segurança

### Inputs
```javascript
import { render, fireEvent } from '@testing-library/react-native';

describe('Security', () => {
  it('sanitizes user input', () => {
    const { getByPlaceholderText } = render(<InputComponent />);
    const input = getByPlaceholderText('Enter text');
    
    fireEvent.changeText(input, '<script>alert("xss")</script>');
    expect(input.props.value).not.toContain('<script>');
  });

  it('validates sensitive data', () => {
    const { getByPlaceholderText, getByText } = render(<FormComponent />);
    const input = getByPlaceholderText('Password');
    
    fireEvent.changeText(input, 'weak');
    fireEvent.press(getByText('Submit'));
    
    expect(getByText('Password too weak')).toBeTruthy();
  });
});
```

## Execução de Testes

### Comandos
```bash
# Todos os testes
npm test

# Testes específicos
npm test -- MyComponent

# Com cobertura
npm test -- --coverage

# Watch mode
npm test -- --watch

# Debug
npm test -- --debug
```

### Scripts
```json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:debug": "jest --debug"
  }
}
``` 